{"version":3,"sources":["GaugeNavBar.tsx","Map.tsx","InputTemplate.tsx","InputArea.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GaugeNavBar","className","Navbar","NavbarBrand","href","alt","src","Map","directionsDisplay","this","attachMapsScript","nextProps","props","origin","destination","callDistanceMatrix","drawPathOnMap","window","google","doInitMapLogic","s","document","createElement","type","x","getElementsByTagName","parentNode","insertBefore","addEventListener","directionsService","maps","DirectionsService","request","travelMode","map","getElementsByClassName","center","lat","lng","zoom","route","response","status","setDirections","setMap","alert","service","DistanceMatrixService","origins","destinations","unitSystem","UnitSystem","IMPERIAL","getDistanceMatrix","handleComputeResult","result","rows","elements","distance","value","duration","text","DirectionsRenderer","Component","InputTemplate","inputFormNode","placeholder","prepend","validationRegex","formIdentifier","InputGroup","Prepend","Text","id","FormControl","aria-label","aria-describedby","ref","onChange","validateChange","test","storeInputValue","InputArea","buttonNodeRef","useState","gasPrice","mpg","validators","setValidators","inputValues","setInputValues","useEffect","disabled","storeValidity","isValid","formValue","Row","Button","size","onClick","handleClick","App","setOrigin","setDestination","setMpg","setGasPrice","resultComponent","setResultComponent","Container","Col","sm","inputInfo","distanceInMiles","totalCost","Math","round","component","Alert","variant","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f79f0285.chunk.js","sourcesContent":["import React from 'react'\nimport './GaugeNavBar.css'\nimport Navbar from 'react-bootstrap/Navbar'\nimport NavbarBrand from 'react-bootstrap/NavbarBrand'\n\nfunction GaugeNavBar(): JSX.Element {\n  return (\n    <div className=\"GaugeNavBar\">\n      <Navbar>\n        <NavbarBrand href=\"https://coopslarhette.github.io/gauge/\">\n          Gauge\n        </NavbarBrand>\n        <div className=\"ml-auto\">\n          <a href=\"https://github.com/coopslarhette\">\n            <img alt=\"github page\" src=\"../public/github-logo.png\" />\n          </a>\n        </div>\n      </Navbar>\n    </div>\n  )\n}\n\nexport default GaugeNavBar\n","/* global google */\nimport React, { Component } from 'react'\nimport './Map.css'\n\ntype MyProps = {\n  origin: string; destination: string;\n  handleComputeResult: (distance: number, duration: string) => void\n}\n\nclass Map extends Component<MyProps> {\n  directionsDisplay\n\n  componentDidMount(): void {\n    this.attachMapsScript()\n  }\n\n  shouldComponentUpdate(nextProps: Readonly<MyProps>): boolean {\n    const { origin, destination } = this.props\n    return origin !== nextProps.origin || destination !== nextProps.destination\n  }\n\n  componentDidUpdate(): void {\n    this.callDistanceMatrix()\n    this.drawPathOnMap()\n  }\n\n  attachMapsScript(): void {\n    if (!window.google) {\n      const s = document.createElement('script')\n      s.type = 'text/javascript'\n      s.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyC1rUOvjD8PT8XlKlL6uXXaq6wl_9lIOWg'\n      const x = document.getElementsByTagName('script')[0]\n      if (x && x.parentNode) {\n        x.parentNode.insertBefore(s, x)\n      }\n      // Below is important.\n      // We cannot access google.maps until it's finished loading\n      s.addEventListener('load', () => {\n        this.doInitMapLogic()\n      })\n    } else {\n      this.doInitMapLogic()\n    }\n  }\n\n  drawPathOnMap(): void {\n    const directionsService = new google.maps.DirectionsService()\n    const { origin, destination } = this.props\n    const request: google.maps.DirectionsRequest = {\n      origin,\n      destination,\n      // @ts-ignore\n      travelMode: 'DRIVING',\n    }\n    const map = new google.maps.Map(document.getElementsByClassName('map')[0], {\n      center: {\n        lat: 39.956813,\n        lng: -102.011721,\n      },\n      zoom: 3,\n    })\n\n    directionsService.route(\n      request, (response: google.maps.DirectionsResult, status: string) => {\n        if (status === 'OK') {\n          this.directionsDisplay.setDirections(response)\n          this.directionsDisplay.setMap(map)\n        } else if (status === 'NOT_FOUND' || status === 'ZERO_RESULTS') {\n          // eslint-disable-next-line no-alert\n          alert('One of your addresses could not be found, please try again.')\n        } else {\n          // eslint-disable-next-line no-alert\n          alert('Something went wrong, please try again later.')\n        } // need to figure out better handling of this methinks\n      },\n    )\n  }\n\n  callDistanceMatrix(): void {\n    const { origin, destination } = this.props\n    const service = new google.maps.DistanceMatrixService()\n    const request: google.maps.DistanceMatrixRequest = {\n      origins: [origin],\n      destinations: [destination],\n      // @ts-ignore\n      travelMode: 'DRIVING',\n      unitSystem: google.maps.UnitSystem.IMPERIAL,\n    }\n\n    service.getDistanceMatrix(\n      request, (response: google.maps.DistanceMatrixResponse, status: string): void => {\n        const { handleComputeResult } = this.props\n        if (status === 'OK') {\n          const result = response.rows[0].elements[0]\n          const distance = result.distance.value\n          const duration = result.duration.text\n          handleComputeResult(distance, duration)\n        }\n      },\n    )\n  }\n\n  doInitMapLogic(): void {\n    this.directionsDisplay = new google.maps.DirectionsRenderer()\n    const map = new google.maps.Map(document.getElementsByClassName('map')[0], {\n      center: {\n        lat: 39.956813,\n        lng: -102.011721,\n      },\n      zoom: 3,\n    })\n    this.directionsDisplay.setMap(map)\n  }\n\n  render(): JSX.Element {\n    return (\n      <div className=\"map\" />\n    )\n  }\n}\n\nexport default Map\n","import React from 'react'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport './InputTemplate.css'\n\nfunction InputTemplate(props: {\n  placeholder: string; prepend: string; validationRegex: RegExp;\n  formIdentifier: string; validateChange: (formIdentifier: string, isValid: boolean) => void;\n  storeInputValue: (formValue: string, formIdentifier: string) => void;\n}): JSX.Element {\n  const {\n    placeholder, prepend, validationRegex, formIdentifier,\n  } = props\n  let inputFormNode\n\n  return (\n    <InputGroup className=\"mb-3\">\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"basic-addon1\">{prepend}</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl\n        placeholder={placeholder}\n        aria-label=\"Input\"\n        aria-describedby=\"basic-addon1\"\n        ref={(ref) => {\n          inputFormNode = ref\n        }}\n        onChange={(): void => {\n          props.validateChange(formIdentifier, validationRegex.test(inputFormNode.value))\n          props.storeInputValue(inputFormNode.value, formIdentifier)\n        }}\n      />\n    </InputGroup>\n  )\n}\n\nexport default InputTemplate\n","import React, { useEffect, useState } from 'react'\nimport './InputArea.css'\nimport Row from 'react-bootstrap/Row'\nimport Button from 'react-bootstrap/Button'\nimport InputTemplate from './InputTemplate'\n\nfunction InputArea(props: {\n  handleClick: (inputInfo: {\n    origin: string; destination: string; mpg: number; gasPrice: number;\n  }) => void;\n}): JSX.Element {\n  const [validators, setValidators] = useState({\n    origin: false,\n    destination: false,\n    gasPrice: false,\n    mpg: false,\n  })\n\n  const [inputValues, setInputValues] = useState({\n    origin: '',\n    destination: '',\n    mpg: 0,\n    gasPrice: 0,\n  })\n\n  let buttonNodeRef\n\n  useEffect(() => {\n    buttonNodeRef.disabled = !(validators.origin && validators.origin && validators.gasPrice\n      && validators.mpg)\n  })\n\n  const storeValidity = (formIdentifier: string, isValid: boolean): void => {\n    setValidators({ ...validators, [formIdentifier]: isValid })\n  }\n\n  const storeInputValue = (formValue: number | string, formIdentifier: string): void => {\n    setInputValues({ ...inputValues, [formIdentifier]: formValue })\n  }\n\n  return (\n    <div className=\"flex-block\">\n      <Row>\n        <div className=\"inputRow\">\n          <InputTemplate\n            placeholder=\"Enter your origin.\"\n            prepend=\"A\"\n            validateChange={storeValidity}\n            storeInputValue={storeInputValue}\n            validationRegex={/[a-z0-9]+/i}\n            formIdentifier=\"origin\"\n          />\n          <InputTemplate\n            placeholder=\"Enter your destination.\"\n            prepend=\"B\"\n            validateChange={storeValidity}\n            storeInputValue={storeInputValue}\n            validationRegex={/[a-z0-9]+/i}\n            formIdentifier=\"destination\"\n          />\n        </div>\n      </Row>\n      <Row>\n        <div className=\"inputRow\">\n          <InputTemplate\n            placeholder=\"Enter local cost of gas here.\"\n            prepend=\"$\"\n            validateChange={storeValidity}\n            storeInputValue={storeInputValue}\n            validationRegex={/^\\d(\\.\\d{1,2})?$/}\n            formIdentifier=\"gasPrice\"\n          />\n          <InputTemplate\n            placeholder=\"Enter you car's mpg here.\"\n            prepend=\"η\"\n            validateChange={storeValidity}\n            storeInputValue={storeInputValue}\n            validationRegex={/^\\d{1,3}(\\.\\d+)?$/}\n            formIdentifier=\"mpg\"\n          />\n        </div>\n      </Row>\n      <Button\n        size=\"lg\"\n        ref={(ref): void => {\n          buttonNodeRef = ref\n        }}\n        onClick={(): void => props.handleClick(inputValues)}\n      >\n        Compute Cost!\n      </Button>\n    </div>\n  )\n}\n\nexport default InputArea\n","import React, { useState } from 'react'\nimport './App.css'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Alert from 'react-bootstrap/Alert'\nimport GaugeNavBar from './GaugeNavBar'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Map from './Map'\nimport InputArea from './InputArea'\n\nfunction App() {\n  const [origin, setOrigin] = useState('')\n  const [destination, setDestination] = useState('')\n  const [mpg, setMpg] = useState(0)\n  const [gasPrice, setGasPrice] = useState(0)\n  const [resultComponent, setResultComponent] = useState((<div />))\n\n  function handleComputeRequest(inputInfo: {\n    origin: string; destination: string; mpg: number;\n    gasPrice: number;\n  }): void {\n    setOrigin(inputInfo.origin)\n    setDestination(inputInfo.destination)\n    setMpg(inputInfo.mpg)\n    setGasPrice(inputInfo.gasPrice)\n  }\n\n  /* eslint-disable react/jsx-one-expression-per-line */\n  function generateResultDiv(distance: number, duration: string): void {\n    const metersToMilesConversion = 0.000621371\n    const distanceInMiles = distance * metersToMilesConversion\n    const totalCost = Math.round((distanceInMiles / mpg) * gasPrice)\n    const component = (\n      <Alert variant=\"success\" className=\"result-div\">\n        <h4>\n          {/* eslint-disable-next-line max-len */}\n          Your trip will use approximately ${totalCost} worth of gas and should take about {duration}.\n        </h4>\n      </Alert>\n    )\n    setResultComponent(component)\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <GaugeNavBar />\n        {/* ideally we want this to wrap the map to the bottom aat 768px width as that's the\n        smallest width the input boxes still render nicely at TODO will fix later probably ;) */}\n        <Row className=\"interactionSpace\">\n          <Col sm={7}>\n            <InputArea handleClick={handleComputeRequest} />\n            {resultComponent}\n          </Col>\n          <Col sm={5}>\n            <Map\n              origin={origin}\n              destination={destination}\n              handleComputeResult={generateResultDiv}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nfunction registerValidSW(swUrl, config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function register(config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}